给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

 

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true
给定 word = "SEE", 返回 true
给定 word = "ABCB", 返回 false
 

提示：

board 和 word 中只包含大写和小写英文字母。
1 <= board.length <= 200
1 <= board[i].length <= 200
1 <= word.length <= 10^3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-search
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        if not board or not board[0]:
            return False
        if not word:
            return True
        
        self.res = False
        dx = [1, -1, 0, 0]
        dy = [0, 0, 1, -1]
        def dfs(start, x0, y0):
            if start == len(word) - 1:
                self.res = True
                return
            visited.add((x0, y0))
            
            for k in range(4):
                x = x0 + dx[k]
                y = y0 + dy[k]
                # print x, y
                if 0 <= x < m and 0 <= y < n and (x, y) not in visited and board[x][y] == word[start + 1] and not self.res:
                    visited.add((x, y))
                    dfs(start + 1, x, y)
                    visited.remove((x, y))
            
        m, n = len(board), len(board[0])
        # print m * n, len(word)
        for i in range(m):
            for j in range(n):
                if board[i][j] == word[0]:
                    visited = set()
                    dfs(0, i, j)
                    if self.res:
                        return True
        return False
